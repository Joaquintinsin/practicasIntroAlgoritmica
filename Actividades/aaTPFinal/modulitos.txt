    Función ArregloVacio (dato a e TData) → Lógico
    Léxico local
        i, j e Z
    Inicio
        Si ( a.cant = 0 ) entonces
            ← Verdadero
        sino
            j ← 1
            Para ( i ← 1 , i <= a.cant , i ← i + 1 ) hacer
                Si ( a.a[i].borrado ) entonces
                    j ← j + 1
                Fsi
            Fpara
            Si ( j = a.cant ) entonces
                /* Si todos los elementos del arreglo están borrados, entonces j fue sumando siempre y es igual a la cantidad cargada. Devuelvo verdadero pues están todos borrados. Por lo tanto el arreglo está "vacío lógicamente"... */
                ← Verdadero
            sino
                ← Falso
            Fsi
        Fsi
    Ffunción

    Acción MostrarLSEsinFict (dato q e puntero a Tnodo)
    Léxico local
        msg e Cadena
    Inicio
        Si ( q = nil ) entonces
            msg <-- "La lista está vacía"
            Salida: msg
        sino
            Repetir
	    Si ( no( (^q).info.borrado ) ) entonces
	        // Todos los campos menos el borrado lógico
                    Salida: (^q).info.ddmmyyyy
                    Salida: (^q).info.tmax
                    Salida: (^q).info.tmin
                    Salida: (^q).info.HUM
                    Salida: (^q).info.PNM
                    Salida: (^q).info.DV
                    Salida: (^q).info.FF
                    Salida: (^q).info.PP
	    Fsi
                q <-- (^q).next
            Hasta que ( q = nil )
        Fsi
    Facción
    
    Acción MostrarLSEconFict (dato q e puntero a Tnodo)
    Léxico local
        msg e Cadena
    Inicio
        Si ( (^q).next = nil ) entonces
            msg <-- "La lista está vacía"
            Salida: msg
        sino
            Repetir
                q <-- (^q).next
	    Si ( no( (^q).info.borrado ) ) entonces
	        // Todos los campos menos el borrado lógico
                    Salida: (^q).info.ddmmyyyy
                    Salida: (^q).info.tmax
                    Salida: (^q).info.tmin
                    Salida: (^q).info.HUM
                    Salida: (^q).info.PNM
                    Salida: (^q).info.DV
                    Salida: (^q).info.FF
                    Salida: (^q).info.PP
	    Fsi
            Hasta que ( (^q).next = nil )
        Fsi
    Facción

  void PedirTemp(int *tM){
    scanf ("%d", &(*tM));
    if ( *tM < -100 || *tM > 100 ){
      do{
        printf ("Ingresar una temperatura válida. Entre -100 y 100: ");
        scanf ("%d", &(*tM));
      } while ( *tM < -100 || *tM > 100 );
    }
  }
  void PedirHumedad(int *hA){
    printf ("Ingresar el porcentaje de humedad (de 0 a 100): ");
    scanf ("%d", &(*hA));
    if ( *hA < 0 || *hA > 100 ){
      do{
        printf ("Ingresar un porcentaje de humedad válido. Entre 0 y 100: ");
        scanf ("%d", &(*hA));
      } while ( *hA < 0 || *hA > 100 );
    }
  }
  void PedirDirViento(int *dvA){
		printf ("Ingresar la dirección del viento (de 0 a 360): ");
    scanf ("%d", &(*dvA));
    if ( *dvA < 0 || *dvA > 360 ){
      do{
        printf ("Ingresar una dirección de viento válida. Entre 0 y 360: ");
        scanf ("%d", &(*dvA));
      } while ( *dvA < 0 || *dvA > 360 );
    }
  }
  void PedirPresAtm(int *prA){
		printf ("Ingresar la presión atmosférica (de 900 a 3500): ");
    scanf ("%d", &(*prA));
    if ( *prA < 900 || *prA > 3500 ){
      do{
        printf ("Ingresar una presión atmosférica válida. Entre 900 y 3500: ");
        scanf ("%d", &(*prA));
      } while ( *prA < 900 || *prA > 3500 );
    }
  }
  void PedirVelocViento(int *wA){
		printf ("Ingresar la velocidad del viento (mayor que 0): ");
    scanf ("%d", &(*wA));
    if ( *wA <= 0 ){
      do{
        printf ("Ingresar una velocidad de viento válida. Debe ser positivo: ");
        scanf ("%d", &(*wA));
      } while ( *wA <= 0 );
    }
  }
  void PedirPrecPluv(int *ppA){
		printf ("Ingresar la precipitación pluvial (de 0 a 1000): ");
    scanf ("%d", &(*ppA));
    if ( *ppA < 0 || *ppA > 1000 ){
      do{
        printf ("Ingresar una precipitación pluvial válida. Entre 0 y 1000: ");
        scanf ("%d", &(*ppA));
      } while ( *ppA < 0 || *ppA > 1000 );
    }
  }