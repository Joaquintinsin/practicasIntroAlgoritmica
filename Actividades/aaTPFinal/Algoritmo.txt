Hacer Alta Suprimir Mostrar en C
Usar nombre externo en los modulos. Abrirlos y cerrarlos adentro
Pasar funcion recursiva a funcion

Algoritmo EstaciónMeteorológica
Léxico
	Max = 1000
	TData = < a e arreglo [1..Max] de regdiario, cant e (0..Max) >
	regdiario = < ddmmyyyy e Z, tmax e Z, tmin e Z, HUM e (0..100), PNM e Z, DV e (0..360), FF e Z, PP e (0..1000), borrado e Lógico >
	Función ArchVacio(dato f e Archivo de regdiario) --> Lógico
	Léxico local
		r e regdiario
	Incio
		Si ( EOF(f) ) entonces
			<-- Verdadero
		sino
			Mientras ( no ( eof(f) ) ) hacer
				Leer(f, r)
				Si ( no( r.borrado ) ) entonces
					<-- Falso
				Fsi
			Fmientras
			Si ( EOF(f) ) entonces
				<-- Verdadero
			Fsi
		Fsi
	Ffunción

	Acción Alta(dato nomArch e Cadena, resultado fA e Archivo de regdiario)
	Léxico local
		Acción PedirFecha(resultado fecha e Z)
		Léxico local
			msg e Cadena
			dA, mA, aA e Z
		Inicio	// De la acción PedirFecha
			Entrada: aA
			// Def de años
			Si ( aA < 1000 o aA > 9999 ) entonces
				Repetir
					msg <-- "Ingresar un año válido"
					Salida: msg
					Entrada: aA
				Hasta que ( aA >= 1000 y aA <= 9999 )
			Fsi
			Si ( ( aA mod 4 = 0 y aA mod 100 <> 0 ) o ( aA mod 100 = 0 y aA mod 400 = 0 ) )  entonces // Es bisiesto
				Entrada: mA
				// Def de mes
				Si ( mA < 1 o mA > 12 ) entonces
					Repetir
						msg <-- "Ingresar un mes válido"
						Salida: msg
						Entrada: mA
					Hasta que ( mA >= 1 y mA <= 12 )
				Fsi
				Entrada: dA
				// Def de días
				Si ( dA < 1 o dA > 31 ) entonces
					Repetir
						msg <-- "Ingresar un día válido"
						Salida: msg
						Entrada: dA
					Hasta que ( dA >= 1 y dA <= 31 )
				Fsi
				Si ( mA = 2 y dA > 29 ) entonces
					Repetir
						msg <-- "Ingresar un día de febrero válido"
						Salida: msg
						Entrada: dA
					Hasta que ( dA >= 1 y dA <= 29 )
				Fsi
			sino	// no es bisiesto
				Entrada: mA
				// Def de mes
				Si ( mA < 1 o mA > 12 ) entonces
					Repetir
						msg <-- "Ingresar un mes válido"
						Salida: msg
						Entrada: mA
					Hasta que ( mA >= 1 y mA <= 12 )
				Fsi
				Entrada: dA
				// Def de días
				Si ( dA < 1 o dA > 31 ) entonces
					Repetir
						msg <-- "Ingresar un día válido"
						Salida: msg
						Entrada: dA
					Hasta que ( dA >= 1 y dA <= 31 )
				Fsi
				Si ( mA = 2 y dA > 28 ) entonces
					Repetir
						msg <-- "Ingresar un día de febrero válido. Atención: El año ingresado no es bisiesto"
						Salida: msg
						Entrada: dA
					Hasta que ( dA >= 1 y dA <= 28 )
				Fsi
			Fsi
			fecha <-- dA * 1000000 + mA * 10000 + aA
		Facción
		Acción PedirTemp(resultado tM e Z)
		Léxico local
			msg e Cadena
		Inicio
			Entrada: tM
			Si ( tM < -100 o tM > 100 ) entonces
				Repetir
					msg <-- "Ingresar una temperatura válida. Entre -100 y 100 grados centígrados."
					Salida: msg
					Entrada: tM
				Hasta que ( tM >= -100 y tm <= 100 )
			Fsi
		Facción
		Acción PedirPresAtm(resultado prA e Z)
		Léxico local
			msg e Cadena
		Inicio
			Entrada: prA
			Si ( prA < 900 o prA > 3500 ) entonces
				Repetir
					msg <-- "Ingresar una presión atmosférica válida. Entre 900 y 3500."
					Salida: msg
					Entrada: prA
				Hasta que ( prA >= 900 y prA <= 3500 )
			Fsi
		Facción
		Acción PedirVelocViento(resultado wA e Z)
		Léxico local
			msg e Cadena
		Inicio
			Entrada: wA
			Si ( wA <= 0 ) entonces
				Repetir
					msg <-- "Ingresar una velocidad de viento válida. Debe ser positivo."
					Salida: msg
					Entrada: wA
				Hasta que ( wA > 0 )
			Fsi
		Facción
		rA e regdiario
		rta e Lógico
		msg e Cadena
	Inicio	// De la acción Alta
		Abrir(nomArch, fA, a)
		msg <-- "¿Desea dar de alta un registro?"
		Salida: msg
		Entrada: rta
		Si ( rta ) entonces
			Repetir
				msg <-- "Ingresar la fecha correspondiente al registro"
				Salida: msg
				PedirFecha(rA.ddmmyyyy)
				msg <-- "Ingresar la temperatura máxima de la fecha"
				Salida: msg
				PedirTemp(rA.tmax)
				msg <-- "Ingresar la temperatura mínima de la fecha"
				Salida: msg
				PedirTemp(rA.tmin)
				msg <-- "Ingresar el porcentaje de humedad promedio de la fecha"
				Salida: msg
				Entrada: rA.HUM
				msg <-- "Ingresar el promedio de la presión atmosférica de la fecha"
				Salida: msg
				PedirPresAtm(rA.PNM)	// entre 900 y 3500
				msg <-- "Ingresar la dirección del viento de la fecha"
				Salida: msg
				Entrada: rA.DV
				msg <-- "Ingresar la velocidad máxima del viento de la fecha"
				Salida: msg
				PedirVelocViento(rA.FF)	// positivo
				msg <-- "Ingresar la precipitación pluvial acumulado el día de la fecha"
				Salida: msg
				Entrada: rA.PP
				rA.borrado <-- Falso
				Escribir(fA, rA)
				msg <-- "¿Desea seguir cargando? V o F"
				Salida: msg
				Entrada: rta
			Hasta que ( no(rta) )
		sino
			msg <-- "Vuelve al menú principal"
			Salida: msg
		Fsi
		Cerrar(fA)
	Facción

	Acción Suprimir(dato/resultado fA e Archivo de regdiario)
	Léxico local
		Función PropEC(dato regArch e regdiario, fechaPedida e Z) --> Lógico
		Inicio
			<-- ( regArch.ddmmyyyy = fechaPedida y no( regArch.borrado ) )
		Ffunción
		Acción PedirFecha(resultado fecha e Z)
		Léxico local
			msg e Cadena
			dA, mA, aA e Z
		Inicio	// De la acción PedirFecha
			Entrada: aA
			// Def de años
			Si ( aA < 1000 o aA > 9999 ) entonces
				Repetir
					msg <-- "Ingresar un año válido"
					Salida: msg
					Entrada: aA
				Hasta que ( aA >= 1000 y aA <= 9999 )
			Fsi
			Si ( ( aA mod 4 = 0 y aA mod 100 <> 0 ) o ( aA mod 100 = 0 y aA mod 400 = 0 ) )  entonces // Es bisiesto
				Entrada: mA
				// Def de mes
				Si ( mA < 1 o mA > 12 ) entonces
					Repetir
						msg <-- "Ingresar un mes válido"
						Salida: msg
						Entrada: mA
					Hasta que ( mA >= 1 y mA <= 12 )
				Fsi
				Entrada: dA
				// Def de días
				Si ( dA < 1 o dA > 31 ) entonces
					Repetir
						msg <-- "Ingresar un día válido"
						Salida: msg
						Entrada: dA
					Hasta que ( dA >= 1 y dA <= 31 )
				Fsi
				Si ( mA = 2 y dA > 29 ) entonces
					Repetir
						msg <-- "Ingresar un día de febrero válido"
						Salida: msg
						Entrada: dA
					Hasta que ( dA >= 1 y dA <= 29 )
				Fsi
			sino	// no es bisiesto
				Entrada: mA
				// Def de mes
				Si ( mA < 1 o mA > 12 ) entonces
					Repetir
						msg <-- "Ingresar un mes válido"
						Salida: msg
						Entrada: mA
					Hasta que ( mA >= 1 y mA <= 12 )
				Fsi
				Entrada: dA
				// Def de días
				Si ( dA < 1 o dA > 31 ) entonces
					Repetir
						msg <-- "Ingresar un día válido"
						Salida: msg
						Entrada: dA
					Hasta que ( dA >= 1 y dA <= 31 )
				Fsi
				Si ( mA = 2 y dA > 28 ) entonces
					Repetir
						msg <-- "Ingresar un día de febrero válido. Atención: El año ingresado no es bisiesto"
						Salida: msg
						Entrada: dA
					Hasta que ( dA >= 1 y dA <= 28 )
				Fsi
			Fsi
			fecha <-- dA * 1000000 + mA * 10000 + aA
		Facción
		fecha e Z
		rA e regdiario
		rta e Lógico
		msg e Cadena
		enc e Lógico
	Inicio
		IrPos(fA, 0)
		Si ( ArchVacio(fA) ) entonces
			msg <-- "No se puede suprimir porque el archivo está vacío. Vuelve al menú principal."
			Salida: msg
		sino
			msg <-- "¿Desea suprimir un registro?"
			Salida: msg
			Entrada: rta
			Si ( rta ) entonces
				Repetir
					msg <-- "¿De qué fecha es el registro que quiere suprimir?"
					Salida: msg
					PedirFecha(fecha)
					Repetir
						Leer (fA, rA)
					Hasta que ( EOF(fA) o PropEC(rA, fecha) )
					Si ( PropEC(rA, fecha) ) entonces
						rA.borrado <-- Verdadero
						IrPos(fA, PosicionActual(fA)-1)
						Escribir(fA, rA)
						msg <-- "Suprimido con éxito"
						Salida: msg
					sino
						msg <-- "No se encontró la fecha para suprimir"
						Salida: msg
					Fsi
					Si ( no ( ArchVacio(fA) ) ) entonces
						msg <-- "¿Desea suprimir nuevamente?"
						Salida: msg
						Entrada: rta
					sino
						msg <-- "No hay más elementos para suprimir. Vuelve al menú principal"
						Salida: msg
					Fsi
				Hasta que ( no( rta ) o ArchVacio(fA) )
			sino
				msg <-- "No se quiso suprimir nada. Vuelve al menú principal"
				Salida: msg
			Fsi
		Fsi
	Facción

	Accion ModificarFecha(dato-resultado f e ARCHIVO de regdiario)
	Léxico local
		fecha e Z
		msj e Cadena
	Inicio
		Entrada:fecha
		 // puede pasar que: no este la fecha que me pasaron que este borrado y exista la fecha fecha invalida
		IrPos(f,0) // se va a la marca inicial del archivo
		Mientras no(EOF(f)) y (reg.ddmmyyyy != fecha ) hacer
			Leer( f, reg)
		Fmientras
		Según:
			(reg.ddmmyyyy = fecha):
				Si  reg.borrado != verdadero entonces //  si borrado = falso ESTA PRESENTE(existe)
					IrPos(f, posicionActual(f)-1)
					Entrada: x // modifico el archivo
					Escribir(reg,x) // escribo msj de que se ejecuto con exito
				sino 
					// msj esta borrado
				Fsi
			(reg.ddmmyyyy != fecha) : 
				msj <- "la fecha no existe"
				Salida: msj
		Fsegún
	Facción
	Acción Mostrar(dato f e ARCHIVO de regdiario)
	Lexico local
		msj e cadena
		reg e regdiario
	Inicio
		IrPos(f, 0)
		Según:
			(EOF(f)) :
				msj <- "el archivo esta vacio"
				Salida: msj
			no(EOF(f)): 
				Mientras no ( EOF(f) ) hacer
					Leer(f,reg)
					Si no( reg.borrado ) entonces 
						Salida: reg
					Fsi
				Fmientras
		Fsegún
	Facción
	Acción archArray(dato f e ARCHIVO de regdiario, resultado registro e TData)
	Léxico local
		reg e regdiario
		i e Z
		msj e cadena 
	Inicio
		IrPos(f, 0)
		Según
			(EOF(f)): 
				msj <- "el archivo esta vacio"
				salida:msj 
			no(EOF(f)): 
				i <- 1 // inicial. trat
				Mientras no EOF(f) y i <= Max hacer 
					Leer(f, reg)
					registro.a[i].ddmmyyyy <- reg.ddmmyyyy
					registro.a[i].tmax <- reg.tmax
					registro.a[i].tmin <- reg.tmin
					registro.a[i].hum <- reg.hum
					registro.a[i].PNM <- reg.PNM
					registro.a[i].DV <- reg.DV
					registro.a[i].FF <- reg.FF
					registro.a[i].PP <- reg.PP
					registro.a[i].borrado <- reg.borrado
					i <- i+1
				Fmientras
				registro.cant <-- i
		Fsegún
	Facción
	Acción BuscaFecha (dato f e ARCHIVO de regdiario, resultado registro e TData) // hacer de forma recursiva
	Acción ListarMax()

// en gdocs está así... pero faltaban cosas por pulir todavia
funcion ListarMax( dato nom e cadena ) -> TData
    Lexico local
    registro e TData
    f e ARCHIVO de regdiario
    maxima e regdiario
    dia e Z
inicio
segun:
(EOF(f)): msj <- “el archivo esta vacio”
	  salida:msj
no(EOF(f)):   
            archArray(nom) // si el archivo no esta vacio, utilizo funcion que dado un archivo te devuelve un arreglo   
            i <- 1 // Incial. adq
            maxima <- registro.a[i].tmax  // contiene la primer temperatura maxima 
            dia < - registro.a.[i].ddmmyyyy
            i <- i +1 // ya entro con el elemento siguiente

            mientras (i < registro.cant + 1)  y (maxima <= registro.a.[i].tmax)  hacer
                si ( registro.a[i] borrado != falso) entonces  
                    maxima <- registro.a.[i].tmax // encontré un valor que es mayor 
                    dia <- registro.a.[i].ddmmyyyy // guardo el dia 
                i <- i + 1 
            fmientras 
            segun:
            (i < registro.cant + 1): salida: dia
            (i = registro.cant + 1): salida: dia // no se encontro otro dia con tmax mas alta que el primero
fsegun
ffuncion


	Acción ListarPrecMax(dato fA e Archivo de regdiario, resultado arrPrec e TData)
	Léxico local

	Acción ListarMayMenVelViento(dato fA e Archivo de regdiario, resultado arr e TData)	// arr va a parar a un arreglo que contenga los vientos de may a menor
	Léxico local
		msg e Cadena
		i, j e Z
		tmp, rA e regdiario
	Inicio
		IrPos(fA, 0)
		Si ( EOF(f) ) entonces
			arr.cant <-- 0
			msg <-- "El archivo está vacío"
			Salida: msg
		sino
			arr.cant <-- 0
			Mientras ( arr.cant < Max y no( EOF(fA) ) ) hacer
				Leer(fA, rA)
				arr.cant <-- arr.cant + 1
				Si ( no( rA.borrado ) ) entonces
					arr.a[arr.cant] <-- rA
				Fsi
			Fmientras
			// Algoritmo de BubbleSort pero de mayor a menor. Ordeno el arreglo de manera estable de mayor a menor
			i <-- arr.cant
			Mientras ( i > 1 ) hacer
				j <-- 1
				Mientras ( j < i ) hacer
					Si ( arr.a[j].FF < arr.a[j+1].FF ) entonces	// ordeno de mayor a menor, al revés de como lo hace BubbleSort
						tmp <-- arr.a[j+1]
						arr.a[j+1] <-- arr.a[j]
						arr.a[j] <-- tmp
					Fsi
					j <-- j + 1
				Fmientras
				i <-- i - 1
			Fmientras
		Fsi
	Facción
	Acción CopiaSeguridad(dato fOld e Archivo de regdiario, resultado gA e Archivo de regdiario)
	    Léxico local
	        Función HoraActual () → Z    // Función que devuelve la hora justa en la que se invocó en formato ddmmyyy_hh.mm.ss, auxiliar para concatenar el nombre del archivo de la copia
	        nomArc e Cadena
	        msg, hora e Cadena
	        rA e regdiario
	        rta e Lógico
	    Inicio
	        IrPos(fOld, 0)
	        Si ( ArchVacio(fOld) ) entonces
	            msg <-- "El archivo el cual se le realizará la copia de seguridad aún no tiene datos almacenados"
	            Salida: msg
	            hora ← HoraActual()
	            nomArc ← “copiaVacia_” + hora + “.dat”
	            Abrir (nomArc, gA, e)    // como gA es de tipo resultado, debo asignarle algo para que no salga indefinido. Entonces le devuelvo un archivo que está vacío
	            Cerrar (gA)
	        sino
	            msg <-- "¿Realizar copia de seguridad?"
	            Salida: msg
	            Entrada: rta
	            Si ( rta ) entonces
	                msg <-- "Ingresar el nombre del archivo para la copia de seguridad (sin el .dat). Se concatenará la hora en que se realizó luego del nombre."
	                Salida: msg
	                Entrada: nomArc
	                hora ← HoraActual()
	                nomArc <-- nomArc + “_” + hora + “.dat”
	                Mientras ( no( ArchVacio(fOld) ) ) hacer
	                    Leer (fOld, rA)
	                    Si ( no ( rA.borrado ) ) entonces    // Escribo en el archivo destino lo que no esté borrado en el archivo origen
	                        Escribir (gA, rA)
	                    Fsi
	                Fmientras
	            sino
	                msg <-- "Vuelve al menú principal"
	                Salida: msg
	                hora ← HoraActual()
	                nomArc ← “copiaVacia_” + hora + “.dat”
	                Abrir (nomArc, gA, e)    // como gA es de tipo resultado, debo asignarle algo para que no salga indefinido. Entonces le devuelvo un archivo que está vacío
	                Cerrar (gA)
	            Fsi
		Fsi
    	Facción
	Acción Verificar(dato nom e Cadena, dato/resultado fA e Archivo de regdiario)
	Léxico local
		msg e Cadena
	Inicio
		Abrir(nom, fA, a)
		Si ( EOF(fA) ) entonces
			msg <-- "El archivo "+nom+" fue creado."
			Salida: msg
		sino
			msg <-- "Archivo "+nom+" abierto exitosamente."
			Salida: msg
		Fsi
		Cerrar(f)
	Facción
	nombreArchivo e Cadena
	f e Archivo de regdiario
Inicio
	Entrada: nombreArchivo
	Verificar(nom, f)
Fin


    Acción BuscaFecha (dato f e ARCHIVO de regdiario, resultado registro e TData)
    Léxico local
        msj e Cadena
        fecha, i e Z
    Inicio
        IrPos(f, 0)
        segun:
            ( ArchVacio(f) ) : 
               msj <- “el archivo esta vacio”
               salida:msj
               registro.cant ← 0
            ( no( ArchVacio(f) ) ) :
                archArray(f, array) // si el archivo no esta vacio, utilizo funcion que dado un archivo te devuelve un arreglo
                PedirFecha(fecha) // pido la entrada de la fecha      
                i <- 1 // Incial. adq
                mientras (i < registro.cant + 1)  && (registro.a[i] != fecha) hacer
                    i <- i+1
                fmientras
                segun:
                    (i < registro.cant + 1): 
                        si ( no(registro.a[i].borrado) ) entonces
                            salida: registro.a[i] // el registro esta activo y muestro todos sus parametros
                        sino
                            msj <-"El registro esta borrado" // encontro la fecha pero esta borrada
                            salida: msj 
                        fsi
                    (i = registro.cant + 1) : 
                        msj <- " La fecha no fue encontrada"
                        salida: msj
                fsegun
        fsegun
    Facción

 Acción ListarMax(dato f e ARCHIVO de regdiario, resultado s e puntero Tnodo)
    Léxico local
	
    Facción